{"message":"no function or associated item named `new` found for type `&'a point::Point1<S>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n"},"level":"error","spans":[{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":7116,"byte_end":7119,"line_start":230,"line_end":230,"column_start":51,"column_end":54,"is_primary":true,"text":[{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":51,"highlight_end":54}],"label":"function or associated item not found in `&'a point::Point1<S>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11756,"byte_end":11794,"line_start":311,"line_end":311,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"impl_point!(Point1 { x }, Vector1, 1);","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `new` found for type `&'a point::Point1<S>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs:230:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `&'a point::Point1<S>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_point!(Point1 { x }, Vector1, 1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\n"}
{"message":"no function or associated item named `new` found for type `&'a point::Point1<S>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n"},"level":"error","spans":[{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":7272,"byte_end":7275,"line_start":233,"line_end":233,"column_start":51,"column_end":54,"is_primary":true,"text":[{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":51,"highlight_end":54}],"label":"function or associated item not found in `&'a point::Point1<S>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11756,"byte_end":11794,"line_start":311,"line_end":311,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"impl_point!(Point1 { x }, Vector1, 1);","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `new` found for type `&'a point::Point1<S>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs:233:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `&'a point::Point1<S>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_point!(Point1 { x }, Vector1, 1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\n"}
{"message":"no function or associated item named `new` found for type `&'a point::Point1<S>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n"},"level":"error","spans":[{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":7428,"byte_end":7431,"line_start":236,"line_end":236,"column_start":51,"column_end":54,"is_primary":true,"text":[{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":51,"highlight_end":54}],"label":"function or associated item not found in `&'a point::Point1<S>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11756,"byte_end":11794,"line_start":311,"line_end":311,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"impl_point!(Point1 { x }, Vector1, 1);","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `new` found for type `&'a point::Point1<S>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs:236:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m236\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `&'a point::Point1<S>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_point!(Point1 { x }, Vector1, 1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\n"}
{"message":"no function or associated item named `new` found for type `&'a point::Point2<S>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n"},"level":"error","spans":[{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":7116,"byte_end":7119,"line_start":230,"line_end":230,"column_start":51,"column_end":54,"is_primary":true,"text":[{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":51,"highlight_end":54}],"label":"function or associated item not found in `&'a point::Point2<S>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11795,"byte_end":11836,"line_start":312,"line_end":312,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"impl_point!(Point2 { x, y }, Vector2, 2);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `new` found for type `&'a point::Point2<S>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs:230:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `&'a point::Point2<S>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m312\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_point!(Point2 { x, y }, Vector2, 2);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\n"}
{"message":"no function or associated item named `new` found for type `&'a point::Point2<S>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n"},"level":"error","spans":[{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":7272,"byte_end":7275,"line_start":233,"line_end":233,"column_start":51,"column_end":54,"is_primary":true,"text":[{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":51,"highlight_end":54}],"label":"function or associated item not found in `&'a point::Point2<S>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11795,"byte_end":11836,"line_start":312,"line_end":312,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"impl_point!(Point2 { x, y }, Vector2, 2);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `new` found for type `&'a point::Point2<S>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs:233:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `&'a point::Point2<S>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m312\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_point!(Point2 { x, y }, Vector2, 2);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\n"}
{"message":"no function or associated item named `new` found for type `&'a point::Point2<S>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n"},"level":"error","spans":[{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":7428,"byte_end":7431,"line_start":236,"line_end":236,"column_start":51,"column_end":54,"is_primary":true,"text":[{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":51,"highlight_end":54}],"label":"function or associated item not found in `&'a point::Point2<S>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11795,"byte_end":11836,"line_start":312,"line_end":312,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"impl_point!(Point2 { x, y }, Vector2, 2);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `new` found for type `&'a point::Point2<S>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs:236:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m236\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `&'a point::Point2<S>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m312\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_point!(Point2 { x, y }, Vector2, 2);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\n"}
{"message":"no function or associated item named `new` found for type `&'a point::Point3<S>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n"},"level":"error","spans":[{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":7116,"byte_end":7119,"line_start":230,"line_end":230,"column_start":51,"column_end":54,"is_primary":true,"text":[{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":51,"highlight_end":54}],"label":"function or associated item not found in `&'a point::Point3<S>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11837,"byte_end":11881,"line_start":313,"line_end":313,"column_start":1,"column_end":45,"is_primary":false,"text":[{"text":"impl_point!(Point3 { x, y, z }, Vector3, 3);","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `new` found for type `&'a point::Point3<S>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs:230:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `&'a point::Point3<S>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m313\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_point!(Point3 { x, y, z }, Vector3, 3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\n"}
{"message":"no function or associated item named `new` found for type `&'a point::Point3<S>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n"},"level":"error","spans":[{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":7272,"byte_end":7275,"line_start":233,"line_end":233,"column_start":51,"column_end":54,"is_primary":true,"text":[{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":51,"highlight_end":54}],"label":"function or associated item not found in `&'a point::Point3<S>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11837,"byte_end":11881,"line_start":313,"line_end":313,"column_start":1,"column_end":45,"is_primary":false,"text":[{"text":"impl_point!(Point3 { x, y, z }, Vector3, 3);","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `new` found for type `&'a point::Point3<S>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs:233:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `&'a point::Point3<S>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m313\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_point!(Point3 { x, y, z }, Vector3, 3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\n"}
{"message":"no function or associated item named `new` found for type `&'a point::Point3<S>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n"},"level":"error","spans":[{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":7428,"byte_end":7431,"line_start":236,"line_end":236,"column_start":51,"column_end":54,"is_primary":true,"text":[{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":51,"highlight_end":54}],"label":"function or associated item not found in `&'a point::Point3<S>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11837,"byte_end":11881,"line_start":313,"line_end":313,"column_start":1,"column_end":45,"is_primary":false,"text":[{"text":"impl_point!(Point3 { x, y, z }, Vector3, 3);","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `new` found for type `&'a point::Point3<S>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs:236:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m236\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `&'a point::Point3<S>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m313\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_point!(Point3 { x, y, z }, Vector3, 3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"This error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variable's\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n"},"level":"error","spans":[{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2860,"byte_end":2874,"line_start":95,"line_end":95,"column_start":34,"column_end":48,"is_primary":true,"text":[{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":34,"highlight_end":48}],"label":"expected type parameter `S`, found type parameter `U`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11756,"byte_end":11794,"line_start":311,"line_end":311,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"impl_point!(Point1 { x }, Vector1, 1);","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2343,"byte_end":2344,"line_start":82,"line_end":82,"column_start":14,"column_end":15,"is_primary":false,"text":[{"text":"        impl<S> $PointN<S> {","highlight_start":14,"highlight_end":15}],"label":"expected type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11756,"byte_end":11794,"line_start":311,"line_end":311,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"impl_point!(Point1 { x }, Vector1, 1);","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2744,"byte_end":2745,"line_start":92,"line_end":92,"column_start":24,"column_end":25,"is_primary":false,"text":[{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":24,"highlight_end":25}],"label":"found type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11756,"byte_end":11794,"line_start":311,"line_end":311,"column_start":1,"column_end":39,"is_primary":false,"text":[{"text":"impl_point!(Point1 { x }, Vector1, 1);","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `S`\n   found type `U`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs:95:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        impl<S> $PointN<S> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            pub fn map<U, F>(self, mut f: F) -> Self\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfound type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Self { $($field: f(self.$field)),+ }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected type parameter `S`, found type parameter `U`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_point!(Point1 { x }, Vector1, 1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1mS\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found type `\u001b[0m\u001b[0m\u001b[1mU\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"This error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variable's\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n"},"level":"error","spans":[{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2860,"byte_end":2874,"line_start":95,"line_end":95,"column_start":34,"column_end":48,"is_primary":true,"text":[{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":34,"highlight_end":48}],"label":"expected type parameter `S`, found type parameter `U`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11795,"byte_end":11836,"line_start":312,"line_end":312,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"impl_point!(Point2 { x, y }, Vector2, 2);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2343,"byte_end":2344,"line_start":82,"line_end":82,"column_start":14,"column_end":15,"is_primary":false,"text":[{"text":"        impl<S> $PointN<S> {","highlight_start":14,"highlight_end":15}],"label":"expected type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11795,"byte_end":11836,"line_start":312,"line_end":312,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"impl_point!(Point2 { x, y }, Vector2, 2);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2744,"byte_end":2745,"line_start":92,"line_end":92,"column_start":24,"column_end":25,"is_primary":false,"text":[{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":24,"highlight_end":25}],"label":"found type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11795,"byte_end":11836,"line_start":312,"line_end":312,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"impl_point!(Point2 { x, y }, Vector2, 2);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `S`\n   found type `U`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs:95:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        impl<S> $PointN<S> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            pub fn map<U, F>(self, mut f: F) -> Self\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfound type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Self { $($field: f(self.$field)),+ }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected type parameter `S`, found type parameter `U`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m312\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_point!(Point2 { x, y }, Vector2, 2);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1mS\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found type `\u001b[0m\u001b[0m\u001b[1mU\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"This error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variable's\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n"},"level":"error","spans":[{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2860,"byte_end":2874,"line_start":95,"line_end":95,"column_start":34,"column_end":48,"is_primary":true,"text":[{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":34,"highlight_end":48}],"label":"expected type parameter `S`, found type parameter `U`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11837,"byte_end":11881,"line_start":313,"line_end":313,"column_start":1,"column_end":45,"is_primary":false,"text":[{"text":"impl_point!(Point3 { x, y, z }, Vector3, 3);","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2343,"byte_end":2344,"line_start":82,"line_end":82,"column_start":14,"column_end":15,"is_primary":false,"text":[{"text":"        impl<S> $PointN<S> {","highlight_start":14,"highlight_end":15}],"label":"expected type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11837,"byte_end":11881,"line_start":313,"line_end":313,"column_start":1,"column_end":45,"is_primary":false,"text":[{"text":"impl_point!(Point3 { x, y, z }, Vector3, 3);","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2744,"byte_end":2745,"line_start":92,"line_end":92,"column_start":24,"column_end":25,"is_primary":false,"text":[{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":24,"highlight_end":25}],"label":"found type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":11837,"byte_end":11881,"line_start":313,"line_end":313,"column_start":1,"column_end":45,"is_primary":false,"text":[{"text":"impl_point!(Point3 { x, y, z }, Vector3, 3);","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_point!","def_site_span":{"file_name":"/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs","byte_start":2232,"byte_end":11191,"line_start":80,"line_end":295,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_point {","highlight_start":1,"highlight_end":26},{"text":"    ($PointN:ident { $($field:ident),+ }, $VectorN:ident, $n:expr) => {","highlight_start":1,"highlight_end":72},{"text":"        impl<S> $PointN<S> {","highlight_start":1,"highlight_end":29},{"text":"            /// Construct a new point, using the provided values.","highlight_start":1,"highlight_end":66},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn new($($field: S),+) -> Self {","highlight_start":1,"highlight_end":49},{"text":"                Self { $($field: $field),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            /// Perform the given operation on each field in the point, returning a new point","highlight_start":1,"highlight_end":94},{"text":"            /// constructed from the operations.","highlight_start":1,"highlight_end":49},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn map<U, F>(self, mut f: F) -> Self","highlight_start":1,"highlight_end":53},{"text":"                where F: FnMut(S) -> U","highlight_start":1,"highlight_end":39},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                Self { $($field: f(self.$field)),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> Array for $PointN<S> {","highlight_start":1,"highlight_end":48},{"text":"            type Element = S;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn len() -> usize {","highlight_start":1,"highlight_end":32},{"text":"                $n","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_value(scalar: S) -> Self {","highlight_start":1,"highlight_end":47},{"text":"                Self { $($field: scalar),+ }","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn sum(self) -> S where S: Add<Output = S> {","highlight_start":1,"highlight_end":57},{"text":"                fold_array!(add, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn product(self) -> S where S: Mul<Output = S> {","highlight_start":1,"highlight_end":61},{"text":"                fold_array!(mul, { $(self.$field),+ })","highlight_start":1,"highlight_end":55},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: NumCast + Copy> $PointN<S> {","highlight_start":1,"highlight_end":45},{"text":"            /// Component-wise casting to another type","highlight_start":1,"highlight_end":55},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            pub fn cast<T: NumCast>(&self) -> Option<$PointN<T>> {","highlight_start":1,"highlight_end":67},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $field = match NumCast::from(self.$field) {","highlight_start":1,"highlight_end":68},{"text":"                        Some(field) => field,","highlight_start":1,"highlight_end":46},{"text":"                        None => return None","highlight_start":1,"highlight_end":44},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                )+","highlight_start":1,"highlight_end":19},{"text":"                Some($PointN { $($field),+ })","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> MetricSpace for $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"            type Metric = S;","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn distance2(self, other: Self) -> S {","highlight_start":1,"highlight_end":51},{"text":"                (other - self).magnitude2()","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> EuclideanSpace for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            type Scalar = S;","highlight_start":1,"highlight_end":29},{"text":"            type Diff = $VectorN<S>;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn origin() -> Self {","highlight_start":1,"highlight_end":34},{"text":"                Self { $($field: S::zero()),+ }","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from_vec(v: $VectorN<S>) -> $PointN<S> {","highlight_start":1,"highlight_end":56},{"text":"                $PointN::new($(v.$field),+)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn to_vec(self) -> $VectorN<S> {","highlight_start":1,"highlight_end":45},{"text":"                $VectorN::new($(self.$field),+)","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn dot(self, v: $VectorN<S>) -> S {","highlight_start":1,"highlight_end":48},{"text":"                $VectorN::new($(self.$field * v.$field),+).sum()","highlight_start":1,"highlight_end":65},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseFloat> ApproxEq for $PointN<S> {","highlight_start":1,"highlight_end":53},{"text":"            type Epsilon = S::Epsilon;","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_epsilon() -> S::Epsilon {","highlight_start":1,"highlight_end":49},{"text":"                S::default_epsilon()","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_relative() -> S::Epsilon {","highlight_start":1,"highlight_end":54},{"text":"                S::default_max_relative()","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn default_max_ulps() -> u32 {","highlight_start":1,"highlight_end":43},{"text":"                S::default_max_ulps()","highlight_start":1,"highlight_end":38},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn relative_eq(&self, other: &Self, epsilon: S::Epsilon, max_relative: S::Epsilon) -> bool {","highlight_start":1,"highlight_end":105},{"text":"                $(S::relative_eq(&self.$field, &other.$field, epsilon, max_relative))&&+","highlight_start":1,"highlight_end":89},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn ulps_eq(&self, other: &Self, epsilon: S::Epsilon, max_ulps: u32) -> bool {","highlight_start":1,"highlight_end":90},{"text":"                $(S::ulps_eq(&self.$field, &other.$field, epsilon, max_ulps))&&+","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: Bounded> Bounded for $PointN<S> {","highlight_start":1,"highlight_end":50},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn min_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::min_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn max_value() -> Self {","highlight_start":1,"highlight_end":37},{"text":"                Self { $($field: S::max_value()),+ }","highlight_start":1,"highlight_end":53},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Add<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":71},{"text":"            fn add(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Sub<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $PointN<S> { $PointN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":90},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> AddAssign<$VectorN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":88},{"text":"            fn add_assign(&mut self, vector) { $(self.$field += vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> SubAssign<$VectorN<S>> for $PointN<S> {","highlight_start":1,"highlight_end":87},{"text":"            fn sub_assign(&mut self, vector) { $(self.$field -= vector.$field);+ }","highlight_start":1,"highlight_end":83},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Sub<$PointN<S> > for $PointN<S> {","highlight_start":1,"highlight_end":70},{"text":"            fn sub(lhs, rhs) -> $VectorN<S> { $VectorN::new($(lhs.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":92},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_operator!(<S: BaseNum> Mul<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn mul(point, scalar) -> Self { Self::new($(point.$field * scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Div<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn div(point, scalar) -> Self { Self::new($(point.$field / scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_operator!(<S: BaseNum> Rem<S> for $PointN<S> {","highlight_start":1,"highlight_end":60},{"text":"            fn rem(point, scalar) -> Self { Self::new($(point.$field % scalar),+) }","highlight_start":1,"highlight_end":84},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> MulAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn mul_assign(&mut self, scalar) { $(self.$field *= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> DivAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn div_assign(&mut self, scalar) { $(self.$field /= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        impl_assignment_operator!(<S: BaseNum> RemAssign<S> for $PointN<S> {","highlight_start":1,"highlight_end":77},{"text":"            fn rem_assign(&mut self, scalar) { $(self.$field %= scalar);+ }","highlight_start":1,"highlight_end":76},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise for $PointN<S> {","highlight_start":1,"highlight_end":54},{"text":"            #[inline] fn add_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field + rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn sub_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field - rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn mul_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field * rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn div_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field / rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"            #[inline] fn rem_element_wise(self, rhs: Self) -> Self { Self::new($(self.$field % rhs.$field),+) }","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: Self) { $(self.$field += rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: Self) { $(self.$field -= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: Self) { $(self.$field *= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: Self) { $(self.$field /= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: Self) { $(self.$field %= rhs.$field);+ }","highlight_start":1,"highlight_end":106},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<S: BaseNum> ElementWise<S> for $PointN<S> {","highlight_start":1,"highlight_end":57},{"text":"            #[inline] fn add_element_wise(self, rhs: S) -> Self { Self::new($(self.$field + rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn sub_element_wise(self, rhs: S) -> Self { Self::new($(self.$field - rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn mul_element_wise(self, rhs: S) -> Self { Self::new($(self.$field * rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn div_element_wise(self, rhs: S) -> Self { Self::new($(self.$field / rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"            #[inline] fn rem_element_wise(self, rhs: S) -> Self { Self::new($(self.$field % rhs),+) }","highlight_start":1,"highlight_end":102},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline] fn add_assign_element_wise(&mut self, rhs: S) { $(self.$field += rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn sub_assign_element_wise(&mut self, rhs: S) { $(self.$field -= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn mul_assign_element_wise(&mut self, rhs: S) { $(self.$field *= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn div_assign_element_wise(&mut self, rhs: S) { $(self.$field /= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"            #[inline] fn rem_assign_element_wise(&mut self, rhs: S) { $(self.$field %= rhs);+ }","highlight_start":1,"highlight_end":96},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_scalar_ops!($PointN<usize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<u8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<u16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<u64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<isize> { $($field),+ });","highlight_start":1,"highlight_end":58},{"text":"        impl_scalar_ops!($PointN<i8> { $($field),+ });","highlight_start":1,"highlight_end":55},{"text":"        impl_scalar_ops!($PointN<i16> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<i64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f32> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"        impl_scalar_ops!($PointN<f64> { $($field),+ });","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_index_operators!($PointN<S>, $n, S, usize);","highlight_start":1,"highlight_end":57},{"text":"        impl_index_operators!($PointN<S>, $n, [S], Range<usize>);","highlight_start":1,"highlight_end":66},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeTo<usize>);","highlight_start":1,"highlight_end":68},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFrom<usize>);","highlight_start":1,"highlight_end":70},{"text":"        impl_index_operators!($PointN<S>, $n, [S], RangeFull);","highlight_start":1,"highlight_end":63},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `S`\n   found type `U`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/adamnemecek/.cargo/registry/src/github.com-1ecc6299db9ec823/cgmath-0.16.1/src/point.rs:95:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        impl<S> $PointN<S> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            pub fn map<U, F>(self, mut f: F) -> Self\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfound type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Self { $($field: f(self.$field)),+ }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected type parameter `S`, found type parameter `U`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m313\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_point!(Point3 { x, y, z }, Vector3, 3);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1mS\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found type `\u001b[0m\u001b[0m\u001b[1mU\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\u001b[0m\n\n"}
{"message":"aborting due to 12 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 12 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0308, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0308, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
